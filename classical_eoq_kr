import numpy as np

D=100
K=100
h=0.02

y = np.sqrt(2*K*D/h)
print(f"y* = {y} units for every time t0*")
print(f"t0 = {y/D}")

TCU = K/(y/D) + h*(y/2)
print(f"Total cost per unit time = {TCU}")
print(f'Average Inventory is {y/2}')

from matplotlib import pyplot as plt
t0=y/D

x_axis=[0,t0,t0,2*t0,2*t0,3*t0]
y_axis=[y,0,y,0,y,0]

plt.plot(x_axis,y_axis)
plt.show()

import numpy as np

D=100
K=100
h=0.02
L=12
t0=y/D

if(L>t0):
    print(f'Since L {L} is larger than t0 {t0} we have to calculate Le')

Le=L-int(L/t0)*t0
print(f'The Le is {Le}')

print(f'We should order {y} units every time level drops {Le*D} units')

y = np.sqrt(2*K*D/h)
print(f"y* = {y} units for every time t0*")
print(f"t0 = {y/D}")

TCU = K/(y/D) + h*(y/2)
print(f"Total cost per unit time = {TCU}")
print(f'Average Inventory is {y/2}')

# EO with Price Break
# price break eoq for example  13.3-2 

d=187.5
k=20
h=0.02
l=2
c1=3
c2=2.5
q=1000

ym = np.sqrt(2*k*d/h)
print(f"y={y}")

tcu = c1*d + k*d/ym + h*ym/2
print(f"tcu={tcu}")

a=1
b=2*((c2*d - tcu)/h)
c=2*k*d/h

q1 = (-b+np.sqrt(b*b - 4*a*c))/2*a
q2 = (-b-np.sqrt(b*b - 4*a*c))/2*a

Q = max(q1, q2)
print(f"Q={Q}")

# calculate zones
z1 = (0, ym)
z2 = (ym, Q)
z3 = (Q, np.inf)
print(f"Zones z1={z1} z2={z2} z3={z3}")