import sys

period=[1,2,3,4]
demand=[5,2,3,3]
setup=[5,7,9,7]
holding=[1,1,1,1]

x1=0

def ci(x):
  if x<=6:
    return x
  else:
    return 6+2*(x-6)

def Ci(z,i):
    if(z==0):
        return 0
    else:
        return ci(z)+setup[i]
    
def F(x,z,i):
  if i==0:
    return Ci(z,i)+holding[i]*x
  else:
      return Ci(z,i)+holding[i]*x+f[i-1][x+demand[i]-z]
  
f=[]
z=[]

for i in range(0,len(period)):
  if i==0:
    x_start=0
    x_end=x1+sum(demand)-demand[0]

    z_start=demand[0]-x1
    z_end=sum(demand,-demand[0])+z_start
    
    l1=[]
    l2=[]
    for j in range(x_start,x_end+1):
        cost_val=F(j,j+demand[0]-x1,i)
        l2.append(j+demand[0]-x1)
        l1.append(cost_val)
    f.append(l1)
    z.append(l2)

  elif i<len(period)-1:
    x_start=0
    x_end=sum(demand[i+1:])
    z_start=0
    l1=[]
    l2=[]
    for j in range(x_start,x_end+1):
      cost_val=sys.maxsize
      for l in range(z_start,demand[i]+j+1):
        if cost_val>F(j,l,i):
          ind=l
          cost_val=min(cost_val,F(j,l,i))
      l1.append(cost_val)
      l2.append(ind)
    z.append(l2)
    f.append(l1)

  else:
    x_start=0
    x_end=1
    z_start=0
    l1=[]
    l2=[]
    for j in range(x_start,x_end):
      cost_val=sys.maxsize
      for l in range(z_start,demand[i]+x_start+1):
        if cost_val>F(j,l,i):
          ind=l
          cost_val=min(cost_val,F(j,l,i))
      l1.append(cost_val)
      l2.append(ind)
    f.append(l1)
    z.append(l2)
    
import numpy as np

actual_z=[0]*len(period)
actual_x=[0]*(len(period)+1)

opt=np.argmin(f[len(period)-1])
actual_x[len(period)-1]=opt
actual_z[len(period)-1]=z[len(period)-1][opt]

for i in range(len(period)-1,0,-1):
  actual_x[i]=actual_x[i+1]+demand[i]-actual_z[i]
  actual_z[i-1]=z[i-1][actual_x[i]]

actual_x[0]=x1

print(actual_x)
print(actual_z)

print(f[len(period)-1][0])